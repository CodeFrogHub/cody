<!DOCTYPE html>
<html ng-app="cody">
  <head>
    <meta charset="utf-8">
	  <meta http-equiv="X-UA-Compatible" content="IE=edge">
	
    <title>{{ application.title }}</title>
    <base href="/">
    
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/neon/js/jquery-ui/css/no-theme/jquery-ui-1.10.3.custom.min.css">
    <link rel="stylesheet" href="/neon/css/font-icons/entypo/css/entypo.css">
    <link rel="stylesheet" href="/neon/css/bootstrap.css">
    <link rel="stylesheet" href="/neon/css/neon-core.css">
    <link rel="stylesheet" href="/neon/css/neon-theme.css">
    <link rel="stylesheet" href="/neon/css/neon-forms.css">
    <link rel="stylesheet" href="/neon/css/skins/white.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    
    <!--[if lt IE 9]><script src="/neon/js/ie8-responsive-file-warning.js"></script><![endif]-->

  	<!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
  	<!--[if lt IE 9]>
  		<script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
  		<script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
  	<![endif]-->
  </head>

  <body class="page-body skin-white" ng-class="application.bodyClasses">
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/underscore.js"></script>
    <script src="/neon/js/jquery-1.11.0.min.js"></script>
    <script src="/js/dependencies/angular.min.js"></script>
    <script src="/js/dependencies/angular-sanitize.js"></script>
    <script src="/js/dependencies/angular-ui-router.js"></script>
    <script src="/neon/js/gsap/main-gsap.js"></script>
    <script src="/neon/js/jquery-ui/js/jquery-ui-1.10.3.minimal.min.js"></script>
    <script src="/neon/js/bootstrap.js"></script>
    <script src="/neon/js/joinable.js"></script>
    <script src="/neon/js/resizeable.js"></script>
    <script src="/neon/js/neon-api.js"></script>
    <script src="/neon/js/jquery.validate.min.js"></script>
    <script src="/neon/js/morris.min.js"></script>
    <script src="/neon/js/toastr.js"></script>
    <script src="/neon/js/neon-chat.js"></script>
    <script src="/neon/js/neon-custom.js"></script>
    <script src="/neon/js/neon-demo.js"></script>
    <script src="/js/application/main.js"></script>
    <script src="/js/application/modules/auth/module.js"></script>
    <script src="/js/application/modules/error/module.js"></script>
    <script src="/js/application/modules/app/module.js"></script>
    <script src="/js/application/modules/app/dashboard/module.js"></script>
    <script src="/js/application/modules/auth/login/module.js"></script>
    <script src="/js/application/configs/html5ModeConfig.js"></script>
    <script src="/js/application/configs/urlRouterProviderConfig.js"></script>
    <script src="/js/application/modules/auth/login/loginController.js"></script>
    <script src="/js/application/runners/application_in_rootscope.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
